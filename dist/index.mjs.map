{"version":3,"file":"index.mjs","sources":["../src/provider.tsx","../src/useXrplReact.tsx"],"sourcesContent":["import { createContext } from 'react';\n\nexport interface XrplProviderConfig {\n    // Add any future config options here\n}\n\ninterface XrplContextValue {\n    config?: XrplProviderConfig;\n}\n\nexport const XrplContext = createContext<XrplContextValue | null>(null);\n\nexport interface XrplProviderProps {\n    config?: XrplProviderConfig;\n    children: React.ReactNode;\n}\n\nexport const XrplProvider: React.FC<XrplProviderProps> = ({ config, children }) => {\n    return <XrplContext.Provider value={{ config }}>{children}</XrplContext.Provider>;\n};\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport { XrplContext } from './provider';\n\nexport function useXrplReact() {\n    const context = useContext(XrplContext);\n    if (!context) {\n        throw new Error('useXrplReact must be used within a XrplProvider');\n    }\n\n    const [address, setAddress] = useState<string | undefined>();\n    const [connectedAccounts, setConnectedAccounts] = useState<string[]>([]);\n    const [network, setNetwork] = useState<string>('mainnet');\n    const [initialized, setInitialized] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [isConnecting, setIsConnecting] = useState(false);\n\n    useEffect(() => {\n        if (typeof window === 'undefined' || !window.xrpl) return;\n        window.xrpl?.initialize?.();\n        setInitialized(true);\n    }, []);\n\n    useEffect(() => {\n        if (typeof window === 'undefined' || !window.xrpl) return;\n\n        const handleSelectedNetwork = (val: string) => setNetwork(val);\n        const handleSelectedAddress = (val: string) => setAddress(val);\n        const handleConnectedAccounts = (val: string[]) => setConnectedAccounts(val);\n\n        window.xrpl?.on?.('xrpl_selectedNetwork', handleSelectedNetwork);\n        window.xrpl?.on?.('xrpl_selectedAddress', handleSelectedAddress);\n        window.xrpl?.on?.('xrpl_connectedAccounts', handleConnectedAccounts);\n\n        return () => {\n            window.xrpl?.off?.('xrpl_selectedNetwork', handleSelectedNetwork);\n            window.xrpl?.off?.('xrpl_selectedAddress', handleSelectedAddress);\n            window.xrpl?.off?.('xrpl_connectedAccounts', handleConnectedAccounts);\n        };\n    }, []);\n\n    const connect = async () => {\n        setIsConnecting(true);\n        try {\n            if (!window.xrpl) throw new Error('No window.xrpl found');\n            const response = await window.xrpl.connect();\n            setAddress(response);\n            return response;\n        } catch (err: any) {\n            setError(err.message);\n            throw err;\n        } finally {\n            setIsConnecting(false);\n        }\n    };\n\n    const disconnect = async () => {\n        if (!window.xrpl) throw new Error('No window.xrpl found');\n        await window.xrpl.disconnect(address);\n        setAddress(undefined);\n    };\n\n    const sendTransaction = async (tx: any) => {\n        if (!window.xrpl) throw new Error('No window.xrpl found');\n        return await window.xrpl.sendTransaction(tx);\n    };\n\n    const changeNetwork = async (network: string) => {\n        if (!window.xrpl) throw new Error('No window.xrpl found');\n        return await window.xrpl.changeNetwork(network);\n    };\n\n    const signMessage = async (message: string) => {\n        if (!window.xrpl) throw new Error('No window.xrpl found');\n        const res = await window.xrpl.signMessage(message);\n        if (res.error) throw new Error(res.error);\n        return res;\n    };\n\n    return useMemo(\n        () => ({\n            address,\n            wallet: address,\n            isConnected: connectedAccounts.includes(address || ''),\n            connect,\n            disconnect,\n            sendTransaction,\n            changeNetwork,\n            connectedAccounts,\n            network,\n            error,\n            isConnecting,\n            signMessage,\n            initialized,\n        }),\n        [address, connectedAccounts, network, error, isConnecting, initialized],\n    );\n}\n"],"names":["_jsx"],"mappings":"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"}